
import numpy as np
from boxvectors import directions as directions
import Initial_Parameters as ip
from md import System
from md import md
from distribution import maxwellboltzmann

Symbols = ip.Symbols
Coefficients = ip.Coefficients
Charges = ip.Charges
N = ip.N*np.sum(Coefficients)
L = ip.L
T = ip.T
dt = ip.dt
p_rea = ip.p_rea
p = ip.p
std = ip.std
k_cut = ip.k_cut
k_max = ip.k_max_long_range
n_boxes_LJ = ip.n_boxes_LJ
n_boxes_coulomb = ip.n_boxes_short_range
Sys= System(Symbols, Coefficients, Charges, N/2)
Labels = Sys.get_Labels()
Sigma, Epsilon = Sys.get_LJ_parameter()

m = Labels[:,0]

switch_parameter = np.array([1,-1,0,0])
r_switch = 1.5

def get_random_starting_Positions(N,L):
    Positions = np.zeros((N,3))
    Positions[:,0] = np.linspace(0.1,L[0],N, endpoint = False)
    Positions[:,1] = np.linspace(0.1,L[1],N, endpoint = False)
    Positions[:,2] = np.linspace(0.1,L[2],N, endpoint = False)
    np.random.shuffle(Positions[:,0])
    np.random.shuffle(Positions[:,1])
    np.random.shuffle(Positions[:,2])
    return Positions
Positions = get_random_starting_Positions(N,L)
Velocities = maxwellboltzmann().sample_distribution(N,m,T)
R = np.linalg.norm(Positions,axis=1)

MD = md(Positions, R, Labels, Velocities, L, T, std, Sigma, Epsilon, switch_parameter,r_switch, n_boxes_coulomb, k_max, dt)

n_boxes_coulomb.dtype

assert 4<5, "tr"

MD._get_forces()

for i in np.arange(N):
    index = (Labels[i,2]*np.ones(N) +Labels[:,2]).astype('int')
    print index

int(5.3)

import particle_interaction

LJ = particle_interaction.lennard_jones()
LJ.compute_forces(Positions, R, Sigma, Epsilon, Labels,L, switch_parameter, r_switch)

for i in np.arange(N):
    #Find the Indices that should be used for sigma and eps (by adding the corresponding labels)
    index = (Labels[i,2]*np.ones(N) +Labels[:,2]).astype('int')

    #Create Arrays that contain the approriate Values for sigma and eps, depending on the interaction pair.
    sig6 =(Sigma*np.ones( (N,3) ) )[0,index]**6
    eps = (Epsilon*np.ones( (N,3) ) )[0,index]

    Positions_Difference = Positions[i,:] - Positions

    Positions_Difference[:,0] = Positions_Difference[:,0]%(L[0]/2)
    Positions_Difference[:,1] = Positions_Difference[:,0]%(L[1]/2)
    Positions_Difference[:,2] = Positions_Difference[:,0]%(L[2]/2)
    for j in Neighbors[i]:
        #Calculate the Distances 
        dist = np.linalg.norm(Positions_Difference[j,:])

        #Calculate the Value of the switch Function
        Switch = (switch_parameter[0]+switch_parameter[1]*dist+switch_parameter[2]*dist**2+switch_parameter[3]*dist**3)
        #Calculate the derivate of the switch Function
        d_Switch = (switch_parameter[1]/(2*np.sqrt(dist)) +switch_parameter[2] + 1.5*switch_parameter[3]*np.sqrt(dist))

        #sigma to distance ratio
        sig6_dist_ratio = sig6[j] /dist**6

        if dist < r_switch:
            #This is the Analytical Expression for the LJ force
            Force_LJ[i,:] += 48.0 *eps[j] *sig6[j] *Positions_Difference[j,:] /dist**8 *(-sig6_dist_ratio +0.5)
        else:
            #This is the derivative of the switch-function, used to cut the LJ-Potential
            Force_LJ[i,:] += 8.0 *eps[j] *Positions_Difference[i,:] *sig6_dist_ratio*(
            (6 /dist**2 (-sig6_dist_ratio +0.5)*Switch ) +(d_Switch)*( sig6_dist_ratio-1)) 



